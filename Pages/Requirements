
import React, { useState, useEffect, useCallback } from "react";
import { Project } from "@/entities/Project";
import { Requirement } from "@/entities/Requirement";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  Download, 
  FileText, 
  Filter, 
  Search,
  Eye,
  Edit,
  CheckCircle,
  AlertTriangle
} from "lucide-react";

import RequirementsList from "../components/requirements/RequirementsList";
import RequirementDetails from "../components/requirements/RequirementDetails";
import DocumentGenerator from "../components/requirements/DocumentGenerator";

export default function Requirements() {
  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState(null);
  const [requirements, setRequirements] = useState([]);
  const [filteredRequirements, setFilteredRequirements] = useState([]);
  const [selectedRequirement, setSelectedRequirement] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [priorityFilter, setPriorityFilter] = useState("all");
  const [isLoading, setIsLoading] = useState(true);
  const [showDocumentGenerator, setShowDocumentGenerator] = useState(false);

  // Memoized callback for loading requirements
  const loadRequirements = useCallback(async () => {
    if (!selectedProject) return;
    
    setIsLoading(true);
    const data = await Requirement.filter({ project_id: selectedProject.id }, "-updated_date");
    setRequirements(data);
    setIsLoading(false);
  }, [selectedProject]); // Dependency: selectedProject

  // Memoized callback for filtering requirements
  const filterRequirements = useCallback(() => {
    let filtered = [...requirements];

    if (searchTerm) {
      filtered = filtered.filter(req => 
        req.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        req.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      filtered = filtered.filter(req => req.status === statusFilter);
    }

    if (priorityFilter !== "all") {
      filtered = filtered.filter(req => req.priority === priorityFilter);
    }

    setFilteredRequirements(filtered);
  }, [requirements, searchTerm, statusFilter, priorityFilter]); // Dependencies: state variables used in filtering

  // Effect to load projects once on mount
  useEffect(() => {
    loadProjects();
  }, []);

  // Effect to load requirements when selectedProject changes
  useEffect(() => {
    loadRequirements();
  }, [loadRequirements]); // Dependency: memoized loadRequirements

  // Effect to filter requirements when requirements or filter criteria change
  useEffect(() => {
    filterRequirements();
  }, [filterRequirements]); // Dependency: memoized filterRequirements

  const loadProjects = async () => {
    const projectsData = await Project.list("-updated_date");
    setProjects(projectsData);
    
    // Check URL params for project
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get('project');
    if (projectId) {
      const project = projectsData.find(p => p.id === projectId);
      if (project) {
        setSelectedProject(project);
      }
    }
    
    setIsLoading(false);
  };

  const validateRequirements = async () => {
    if (!selectedProject || requirements.length === 0) return;

    const validationPrompt = `
As the Validator AI agent, analyze these requirements for conflicts, duplicates, and business alignment:

${requirements.map(req => `
Title: ${req.title}
Description: ${req.description}
Type: ${req.type}
Priority: ${req.priority}
`).join('\n---\n')}

Provide validation feedback for each requirement and identify any conflicts or issues.
    `;

    try {
      const response = await InvokeLLM({
        prompt: validationPrompt,
        response_json_schema: {
          type: "object",
          properties: {
            validation_results: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  requirement_title: { type: "string" },
                  validation_status: { type: "string", enum: ["valid", "needs_clarification", "conflict"] },
                  feedback: { type: "string" },
                  suggestions: { type: "array", items: { type: "string" } }
                }
              }
            },
            overall_conflicts: { type: "array", items: { type: "string" } }
          }
        }
      });

      // Update requirements with validation feedback
      for (const result of response.validation_results) {
        const req = requirements.find(r => r.title === result.requirement_title);
        if (req) {
          await Requirement.update(req.id, {
            status: result.validation_status === "valid" ? "validated" : "draft",
            validation_notes: [result.feedback, ...(result.suggestions || [])] // Ensure suggestions is an array
          });
        }
      }

      loadRequirements(); // Call the memoized loadRequirements
    } catch (error) {
      console.error("Validation failed:", error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50 p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-6">
          <div>
            <h1 className="text-3xl font-bold text-slate-900 mb-2">Requirements Management</h1>
            <p className="text-slate-600">Review, validate, and manage captured requirements</p>
          </div>
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={() => setShowDocumentGenerator(true)}
              disabled={!selectedProject || requirements.length === 0}
            >
              <FileText className="w-4 h-4 mr-2" />
              Generate SRS
            </Button>
            <Button
              onClick={validateRequirements}
              disabled={!selectedProject || requirements.length === 0}
              className="bg-green-600 hover:bg-green-700"
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              Validate All
            </Button>
          </div>
        </div>

        {/* Project Selection */}
        <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60">
          <CardHeader>
            <CardTitle>Select Project</CardTitle>
          </CardHeader>
          <CardContent>
            <Select value={selectedProject?.id || ""} onValueChange={(value) => {
              const project = projects.find(p => p.id === value);
              setSelectedProject(project);
            }}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Choose a project to view requirements..." />
              </SelectTrigger>
              <SelectContent>
                {projects.map((project) => (
                  <SelectItem key={project.id} value={project.id}>
                    {project.name} ({project.requirements_count || 0} requirements)
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </CardContent>
        </Card>

        {selectedProject && (
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Requirements List */}
            <div className="lg:col-span-2">
              <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60">
                <CardHeader>
                  <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                    <CardTitle className="flex items-center gap-2">
                      <FileText className="w-5 h-5" />
                      Requirements ({filteredRequirements.length})
                    </CardTitle>
                    
                    {/* Filters */}
                    <div className="flex items-center gap-2 w-full md:w-auto">
                      <div className="relative flex-1 md:w-64">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                        <Input
                          placeholder="Search requirements..."
                          value={searchTerm}
                          onChange={(e) => setSearchTerm(e.target.value)}
                          className="pl-10"
                        />
                      </div>
                      <Select value={statusFilter} onValueChange={setStatusFilter}>
                        <SelectTrigger className="w-32">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Status</SelectItem>
                          <SelectItem value="draft">Draft</SelectItem>
                          <SelectItem value="clarified">Clarified</SelectItem>
                          <SelectItem value="validated">Validated</SelectItem>
                          <SelectItem value="approved">Approved</SelectItem>
                        </SelectContent>
                      </Select>
                      <Select value={priorityFilter} onValueChange={setPriorityFilter}>
                        <SelectTrigger className="w-32">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Priority</SelectItem>
                          <SelectItem value="low">Low</SelectItem>
                          <SelectItem value="medium">Medium</SelectItem>
                          <SelectItem value="high">High</SelectItem>
                          <SelectItem value="critical">Critical</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <RequirementsList
                    requirements={filteredRequirements}
                    selectedRequirement={selectedRequirement}
                    onSelectRequirement={setSelectedRequirement}
                    isLoading={isLoading}
                  />
                </CardContent>
              </Card>
            </div>

            {/* Details Panel */}
            <div>
              <RequirementDetails
                requirement={selectedRequirement}
                onUpdate={loadRequirements} // Pass the memoized callback
              />
            </div>
          </div>
        )}

        {/* Document Generator Modal */}
        {showDocumentGenerator && (
          <DocumentGenerator
            project={selectedProject}
            requirements={requirements}
            onClose={() => setShowDocumentGenerator(false)}
          />
        )}
      </div>
    </div>
  );
}
