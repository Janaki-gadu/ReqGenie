import React, { useEffect, useRef } from 'react';
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Bot, User, Loader2 } from "lucide-react";
import { format } from "date-fns";

export default function ChatInterface({ messages, isProcessing }) {
  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const getAgentInfo = (agent) => {
    const agentData = {
      collector: { name: "Collector AI", color: "bg-blue-500", icon: "🎯" },
      validator: { name: "Validator AI", color: "bg-green-500", icon: "✅" },
      documenter: { name: "Documenter AI", color: "bg-purple-500", icon: "📝" },
      system: { name: "System", color: "bg-gray-500", icon: "⚙️" }
    };
    return agentData[agent] || agentData.system;
  };

  return (
    <div className="h-96 overflow-y-auto p-6 space-y-4">
      {messages.map((message) => (
        <div
          key={message.id}
          className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
        >
          {message.type === 'ai' && (
            <div className={`w-8 h-8 rounded-full ${getAgentInfo(message.agent).color} flex items-center justify-center text-white text-sm`}>
              <Bot className="w-4 h-4" />
            </div>
          )}
          
          <div className={`max-w-2xl ${message.type === 'user' ? 'ml-12' : 'mr-12'}`}>
            <div
              className={`p-4 rounded-2xl ${
                message.type === 'user'
                  ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white ml-auto'
                  : 'bg-slate-50 border border-slate-200'
              }`}
            >
              {message.type === 'ai' && (
                <div className="flex items-center gap-2 mb-2">
                  <Badge variant="secondary" className="text-xs">
                    {getAgentInfo(message.agent).name}
                  </Badge>
                  <span className="text-xs text-slate-500">
                    {format(message.timestamp, 'HH:mm')}
                  </span>
                </div>
              )}
              
              <p className={`${message.type === 'user' ? 'text-white' : 'text-slate-900'}`}>
                {message.content}
              </p>
              
              {message.clarifying_questions && message.clarifying_questions.length > 0 && (
                <div className="mt-3 pt-3 border-t border-slate-200">
                  <p className="text-sm font-medium text-slate-700 mb-2">Clarifying questions:</p>
                  <ul className="space-y-1">
                    {message.clarifying_questions.map((question, index) => (
                      <li key={index} className="text-sm text-slate-600">• {question}</li>
                    ))}
                  </ul>
 
