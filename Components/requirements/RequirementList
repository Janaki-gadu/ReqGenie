import React from 'react';
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  FileText, 
  CheckCircle, 
  Clock, 
  AlertTriangle,
  Zap
} from "lucide-react";
import { format } from "date-fns";

export default function RequirementsList({ requirements, selectedRequirement, onSelectRequirement, isLoading }) {
  const statusConfig = {
    draft: { color: "bg-yellow-100 text-yellow-800", icon: Clock },
    clarified: { color: "bg-blue-100 text-blue-800", icon: FileText },
    validated: { color: "bg-green-100 text-green-800", icon: CheckCircle },
    approved: { color: "bg-purple-100 text-purple-800", icon: CheckCircle }
  };

  const priorityConfig = {
    low: { color: "bg-slate-100 text-slate-700" },
    medium: { color: "bg-blue-100 text-blue-700" },
    high: { color: "bg-orange-100 text-orange-700" },
    critical: { color: "bg-red-100 text-red-700" }
  };

  const typeConfig = {
    functional: { color: "bg-cyan-100 text-cyan-700", icon: "âš¡" },
    non_functional: { color: "bg-violet-100 text-violet-700", icon: "ðŸ”§" },
    business: { color: "bg-emerald-100 text-emerald-700", icon: "ðŸ’¼" },
    technical: { color: "bg-indigo-100 text-indigo-700", icon: "ðŸ› " }
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {Array(5).fill(0).map((_, i) => (
          <div key={i} className="animate-pulse bg-slate-100 rounded-lg h-24"></div>
        ))}
      </div>
    );
  }

  if (requirements.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <FileText className="w-8 h-8 text-slate-400" />
        </div>
        <h3 className="text-lg font-semibold text-slate-900 mb-2">No Requirements Found</h3>
        <p className="text-slate-500">Start a virtual meeting to capture requirements</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {requirements.map((requirement) => {
        const StatusIcon = statusConfig[requirement.status]?.icon || Clock;
        const isSelected = selectedRequirement?.id === requirement.id;
        
        return (
          <Card
            key={requirement.id}
            className={`p-4 cursor-pointer transition-all duration-200 hover:shadow-md ${
              isSelected 
                ? 'ring-2 ring-blue-500 bg-blue-50/50' 
                : 'bg-white hover:bg-slate-50'
            }`}
            onClick={() => onSelectRequirement(requirement)}
          >
            <div className="flex items-start justify-between mb-3">
              <div className="flex-1">
                <h3 className="font-semibold text-slate-900 mb-1 line-clamp-2">
                  {requirement.title}
                </h3>
                <p className="text-slate-600 text-sm line-clamp-2 mb-2">
                  {requirement.description}
                </p>
              </div>
              <StatusIcon className="w-5 h-5 text-slate-400 ml-2 mt-1" />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 flex-wrap">
                <Badge className={statusConfig[requirement.status]?.color}>
                  {requirement.status}
                </Badge>
                <Badge className={priorityConfig[requirement.priority]?.color}>
                  {requirement.priority}
                </Badge>
                <Badge variant="outline" className={typeConfig[requirement.type]?.color}>
                  {typeConfig[requirement.type]?.icon} {requirement.type.replace('_', ' ')}
                </Badge>
              </div>
              <span className="text-xs text-slate-500">
                {format(new Date(requirement.updated_date), "MMM d")}
              </span>
            </div>

            {requirement.validation_notes && requirement.validation_notes.length > 0 && (
              <div className="mt-3 pt-3 border-t border-slate-200">
                <div className="flex items-center gap-2 text-xs text-amber-700">
                  <AlertTriangle className="w-3 h-3" />
                  <span>Has validation feedback</span>
                </div>
              </div>
            )}
          </Card>
        );
      })}
    </div>
  );
}
