import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Requirement } from "@/entities/Requirement";
import { 
  Edit, 
  Save, 
  X, 
  AlertTriangle, 
  CheckCircle,
  User,
  Calendar
} from "lucide-react";
import { format } from "date-fns";

export default function RequirementDetails({ requirement, onUpdate }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editedRequirement, setEditedRequirement] = useState(null);

  if (!requirement) {
    return (
      <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60">
        <CardContent className="p-8 text-center">
          <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <Edit className="w-8 h-8 text-slate-400" />
          </div>
          <h3 className="text-lg font-semibold text-slate-900 mb-2">Select a Requirement</h3>
          <p className="text-slate-500">Choose a requirement from the list to view details</p>
        </CardContent>
      </Card>
    );
  }

  const startEditing = () => {
    setEditedRequirement(requirement);
    setIsEditing(true);
  };

  const cancelEditing = () => {
    setEditedRequirement(null);
    setIsEditing(false);
  };

  const saveChanges = async () => {
    try {
      await Requirement.update(requirement.id, editedRequirement);
      setIsEditing(false);
      setEditedRequirement(null);
      onUpdate();
    } catch (error) {
      console.error("Error updating requirement:", error);
    }
  };

  const statusColors = {
    draft: "bg-yellow-100 text-yellow-800",
    clarified: "bg-blue-100 text-blue-800",
    validated: "bg-green-100 text-green-800", 
    approved: "bg-purple-100 text-purple-800"
  };

  const priorityColors = {
    low: "bg-slate-100 text-slate-700",
    medium: "bg-blue-100 text-blue-700",
    high: "bg-orange-100 text-orange-700",
    critical: "bg-red-100 text-red-700"
  };

  const current = isEditing ? editedRequirement : requirement;

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-slate-200/60">
      <CardHeader className="border-b border-slate-200/60">
        <div className="flex justify-between items-start">
          <CardTitle className="text-lg">Requirement Details</CardTitle>
          {!isEditing ? (
            <Button variant="outline" size="sm" onClick={startEditing}>
              <Edit className="w-4 h-4 mr-2" />
              Edit
            </Button>
          ) : (
            <div className="flex gap-2">
              <Button variant="outline" size="sm" onClick={cancelEditing}>
                <X className="w-4 h-4" />
              </Button>
              <Button size="sm" onClick={saveChanges}>
                <Save className="w-4 h-4" />
              </Button>
            </div>
          )}
        </div>
      </CardHeader>
      
      <CardContent className="p-6 space-y-6">
        {/* Title */}
        <div>
          <label className="text-sm font-medium text-slate-700 mb-2 block">Title</label>
          {isEditing ? (
            <Input
              value={current.title}
              onChange={(e) => setEditedRequirement({...current, title: e.target.value})}
            />
          ) : (
            <p className="font-semibold text-slate-900">{current.title}</p>
          )}
        </div>

        {/* Description */}
        <div>
          <label className="text-sm font-medium text-slate-700 mb-2 block">Description</label>
 
