
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { InvokeLLM } from "@/integrations/Core";
import { 
  FileText, 
  Download, 
  X, 
  Loader2,
  CheckCircle
} from "lucide-react";
import { format } from "date-fns";
import ReactMarkdown from 'react-markdown';

export default function DocumentGenerator({ project, requirements, onClose }) {
  const [documentType, setDocumentType] = useState("srs");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedDocument, setGeneratedDocument] = useState(null); // Changed to null

  const documentTypes = {
    srs: "Software Requirements Specification (SRS)",
    brd: "Business Requirements Document (BRD)", 
    user_stories: "User Stories Document"
  };

  const getPromptForDocumentType = () => {
    const requirementsData = requirements.map((req, index) => `
Requirement ${index + 1}:
- Title: ${req.title}
- Description: ${req.description}
- Type: ${req.type}
- Priority: ${req.priority}
- Status: ${req.status}
- Stakeholder: ${req.stakeholder}
- User Story: ${req.user_story || 'Not defined'}
- Validation Notes: ${req.validation_notes?.join('; ') || 'None'}
    `).join('\n');

    switch(documentType) {
      case 'srs':
        return `
Generate a professional Software Requirements Specification (SRS) document based on the IEEE 830 standard for the project "${project.name}". The project description is: "${project.description}".

Use the provided requirements data to populate the relevant sections of the SRS. If information is missing for a section, state that it is "To Be Determined (TBD)" or make reasonable assumptions based on the project context. Use markdown for formatting, including headers, lists, and bold text.

Requirements Data:
${requirementsData}

Structure the output into the following sections. Provide detailed content for each section.

1.  **Introduction**
    1.1 Purpose
    1.2 Document Conventions
    1.3 Intended Audience
    1.4 Product Scope
    1.5 References

2.  **Overall Description**
    2.1 Product Perspective
    2.2 Product Functions (Summarize from requirements)
    2.3 User Classes and Characteristics
    2.4 Operating Environment (Assume a standard web environment if not specified)
    2.5 Design and Implementation Constraints (e.g., technologies, security)
    2.6 Assumptions and Dependencies

3.  **System Features**
    (For each functional requirement provided, create a system feature section like 3.1, 3.2, etc.)
    3.x Feature: [Requirement Title]
        3.x.1 Description: [Detailed requirement description]
        3.x.2 Priority: [Requirement Priority]
        3.x.3 Functional Requirements: (Break down the description into a numbered list of specific requirements if possible)

4.  **External Interface Requirements**
    4.1 User Interfaces (Describe general UI/UX principles)
    4.2 Hardware Interfaces (TBD)
    4.3 Software Interfaces (TBD)

5.  **Other Nonfunctional Requirements**
    5.1 Performance Requirements (e.g., response times. TBD if not specified)
    5.2 Security Requirements (Infer from requirements like 'authentication')
    5.3 Software Quality Attributes (e.g., reliability, usability)
`;
      case 'brd':
        return `
Generate a professional Business Requirements Document (BRD) for the project "${project.name}". Project description: "${project.description}". Use markdown for formatting.

Requirements Data:
${requirementsData}

Structure the output into these sections:
1. **Executive Summary**: Project Overview, Business Problem, Proposed Solution, and Business Value.
2. **Project Background**: Problem Statement, Current State, Project Goals and Objectives (SMART goals).
3. **Project Scope**: In-Scope Items, Out-of-Scope Items.
4. **Stakeholders**: Identify key stakeholders and their roles.
5. **Business Requirements**: Group related requirements. For each, detail the business need, value, and priority.
6. **Assumptions, Constraints, and Risks**.
7. **Success Criteria**: Define KPIs to measure project success.
`;
      case 'user_stories':
        return `
Generate a document listing user stories for the project "${project.name}". For each requirement, formulate a clear user story following the "As a [type of user], I want [an action] so that [a benefit]" format. If a user story is already provided, use it. Otherwise, create a new one. Use markdown formatting.

Requirements Data:
${requirementsData}

For each requirement, provide:
- **User Story:** "As a [user], I want [action] so that [benefit]."
- **Acceptance Criteria:** (A list of criteria that must be met for the story to be considered complete).
- **Priority:** (Low, Medium, High, Critical)
`;
      default:
 
