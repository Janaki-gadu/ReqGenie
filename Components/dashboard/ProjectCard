import React from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  MessageSquare, 
  FileText, 
  Clock,
  ArrowRight
} from "lucide-react";
import { format } from "date-fns";

export default function ProjectCard({ project, requirements }) {
  const statusColors = {
    active: "bg-green-100 text-green-800 border-green-200",
    completed: "bg-blue-100 text-blue-800 border-blue-200",
    on_hold: "bg-yellow-100 text-yellow-800 border-yellow-200"
  };

  const requirementCount = requirements.length;
  const validatedCount = requirements.filter(r => r.status === 'validated' || r.status === 'approved').length;

  return (
    <Card className="bg-white border-slate-200/60 hover:shadow-lg hover:shadow-slate-200/20 transition-all duration-200 group">
      <CardContent className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-slate-900 group-hover:text-blue-600 transition-colors">
              {project.name}
            </h3>
            <p className="text-slate-600 text-sm mt-1 line-clamp-2">
              {project.description}
            </p>
          </div>
          <Badge className={`${statusColors[project.status]} border`}>
            {project.status.replace('_', ' ')}
          </Badge>
        </div>
        
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4 text-sm text-slate-500">
            <div className="flex items-center gap-1">
              <FileText className="w-4 h-4" />
              <span>{requirementCount} requirements</span>
            </div>
            <div className="flex items-center gap-1">
              <Clock className="w-4 h-4" />
              <span>
                {project.last_meeting_date 
                  ? format(new Date(project.last_meeting_date), "MMM d")
                  : "No meetings yet"
                }
              </span>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Link to={createPageUrl(`Meeting?project=${project.id}`)}>
              <Button size="sm" variant="outline" className="hover:bg-blue-50 hover:text-blue-600">
                <MessageSquare className="w-4 h-4 mr-2" />
                Meet
              </Button>
            </Link>
            <Link to={createPageUrl(`Requirements?project=${project.id}`)}>
              <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                View
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </Link>
          </div>
        </div>

        {requirementCount > 0 && (
          <div className="mt-4 pt-4 border-t border-slate-100">
            <div className="flex items-center justify-between text-sm">
              <span className="text-slate-600">Validation Progress</span>
              <span className="font-medium text-slate-900">
                {validatedCount}/{requirementCount} validated
              </span>
            </div>
            <div className="w-full bg-slate-100 rounded-full h-2 mt-2">
              <div 
                className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${requirementCount > 0 ? (validatedCount / requirementCount) * 100 : 0}%` }}
              ></div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
